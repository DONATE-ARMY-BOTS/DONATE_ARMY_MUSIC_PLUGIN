import asyncio
import re
from time import time

from pymongo import MongoClient
from pyrogram import filters
from pyrogram.types import Message

from DONATE_ARMY_MUSIC import app

# Define a dictionary to track the last message timestamp for each user
user_last_message_time = {}
user_command_count = {}
# Define the threshold for command spamming (e.g., 20 commands within 60 seconds)
SPAM_THRESHOLD = 2
SPAM_WINDOW_SECONDS = 5


mongo_url_pattern = re.compile(r"mongodb(?:\+srv)?:\/\/[^\s]+")


@app.on_message(filters.command("mongochk"))
async def mongo_command(client, message: Message):
    user_id = message.from_user.id
    current_time = time()
    # Update the last message timestamp for the user
    last_message_time = user_last_message_time.get(user_id, 0)

    if current_time - last_message_time < SPAM_WINDOW_SECONDS:
        # If less than the spam window time has passed since the last message
        user_last_message_time[user_id] = current_time
        user_command_count[user_id] = user_command_count.get(user_id, 0) + 1
        if user_command_count[user_id] > SPAM_THRESHOLD:
            # Block the user if they exceed the threshold
            hu = await message.reply_text(
                f"**{message.from_user.mention} ·¥ò ü·¥á·¥Äs·¥á ·¥Ö·¥è…¥·¥õ ·¥Ö·¥è s·¥ò·¥Ä·¥ç, ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥Ä“ì·¥õ·¥á Ä 5 s·¥á·¥Ñ**"
            )
            await asyncio.sleep(3)
            await hu.delete()
            return
    else:
        # If more than the spam window time has passed, reset the command count and update the message timestamp
        user_command_count[user_id] = 1
        user_last_message_time[user_id] = current_time

    if len(message.command) < 2:
        await message.reply(
            "Please enter your MongoDB URL after the command. Example: `/mongochk your_mongodb_url`"
        )
        return

    mongo_url = message.command[1]
    if re.match(mongo_url_pattern, mongo_url):
        try:
            # Attempt to connect to the MongoDB instance
            client = MongoClient(mongo_url, serverSelectionTimeoutMS=5000)
            client.server_info()  # Will cause an exception if connection fails
            await message.reply("ùó†ùóºùóªùó¥ùóºùóóùóï ùó®ùó•ùóü ùó∂ùòÄ ùòÉùóÆùóπùó∂ùó± ùóÆùóªùó± ùó∞ùóºùóªùóªùó≤ùó∞ùòÅùó∂ùóºùóª ùòÄùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπ‚úÖ")
        except Exception as e:
            await message.reply(f"Failed to connect to MongoDB: {e}")
    else:
        await message.reply("ùóúùóªùòÉùóÆùóπùó∂ùó± ùó†ùóºùóªùó¥ùóºùóóùóï ùó®ùó•ùóü ùó≥ùóºùóøùó∫ùóÆùòÅüíî")


__MODULE__ = "M·¥è…¥…¢·¥è"
__HELP__ = """
## M·¥è…¥…¢·¥èDB C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös H·¥á·¥ò

### 1. /·¥ç·¥è…¥…¢·¥è·¥Ñ ú·¥ã
**D·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥:**
C ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥†·¥Ä…™·¥Ö…™·¥õ è ·¥è“ì ·¥Ä M·¥è…¥…¢·¥èDB URL.

**Us·¥Ä…¢·¥á:**
/·¥ç·¥è…¥…¢·¥è·¥Ñ ú·¥ã [·¥ç·¥è…¥…¢·¥è·¥Ö ô_·¥ú Ä]

**D·¥á·¥õ·¥Ä…™s:**
- V·¥á Ä…™“ì…™·¥ás ·¥õ ú·¥á ·¥†·¥Ä…™·¥Ö…™·¥õ è ·¥è“ì ·¥õ ú·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö M·¥è…¥…¢·¥èDB URL.
- S·¥á…¥·¥Ös ·¥Ä s·¥ú·¥Ñ·¥Ñ·¥áss ·¥ç·¥áss·¥Ä…¢·¥á …™“ì ·¥õ ú·¥á URL …™s ·¥†·¥Ä…™·¥Ö ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú.
- S·¥á…¥·¥Ös ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥ç·¥áss·¥Ä…¢·¥á …™“ì ·¥õ ú·¥á URL …™s …™…¥·¥†·¥Ä…™·¥Ö ·¥è Ä ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™s.
- C ú·¥á·¥Ñ·¥ãs “ì·¥è Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö s·¥ò·¥Ä·¥ç·¥ç…™…¥…¢ ·¥õ·¥è ·¥ò Ä·¥á·¥†·¥á…¥·¥õ ·¥Ä ô·¥ús·¥á.

**Ex·¥Ä·¥ç·¥ò·¥ás:**
- `/·¥ç·¥è…¥…¢·¥è·¥Ñ ú·¥ã ·¥ç·¥è…¥…¢·¥è·¥Ö ô://·¥è·¥Ñ·¥Ä ú·¥ès·¥õ:27017`
"""
